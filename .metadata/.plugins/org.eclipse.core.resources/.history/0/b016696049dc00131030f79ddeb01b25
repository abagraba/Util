
public class ChunkIHDR extends Chunk {

	public static void register() {
		ChunkRegistry.registerChunk("IHDR", ChunkIHDR.class);
		System.out.println("IHDR Chunk Registered.");
	}

	public ChunkIHDR(int size, byte[] header, byte[] data, int crc) {
		super(size, header, data, crc);
	}

	protected boolean valid() {
		return size == 13;
	}

	protected String chunkDescription() {
		int width = (data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3];
		int height = (data[4] << 24) + (data[5] << 16) + (data[6] << 8) + data[7];
		return pad("Width:") + width + " pixels\n" + pad("Height:") + height + " pixels\n" + pad("Bit Depth:") + data[8] + " bits\n" + pad("Color Type:")
				+ IHDRColorType.get(data[9]) + "\n" + pad("Compression Method:") + IHDRCompresionType.get(data[10]) + "\n" + pad("Filter Method:") + data[11] + "\n" + pad("Interlace Method:") + IHDRInterlaceType.get(data[12]);
	}

	private enum IHDRColorType {
		grey("Greyscale"), null1("null"), truc("True Color"), indx("Indexed Color"), gray("Greycale with Alpha"), null2("null"), trua("True Color with Alpha");

		private String name;
		
		public static IHDRColorType get(int i){
			if (i < 0 || i >= values().length)
				return null;
			return values()[i];
		}

		private IHDRColorType(String name) {
			this.name = name;
		}

		public String toString() {
			return name;
		}
	}

	private enum IHDRCompresionType {
		def("Deflate/Inflate");

		private String name;
		
		public static IHDRCompresionType get(int i){
			if (i < 0 || i >= values().length)
				return null;
			return values()[i];
		}

		private IHDRCompresionType(String name) {
			this.name = name;
		}

		public String toString() {
			return name;
		}
	}
	
	private enum IHDRInterlaceType {
		none("No Interlacing"), adam("Adam7 Interlacing");

		private String name;
		
		public static IHDRInterlaceType get(int i){
			if (i < 0 || i >= values().length)
				return null;
			return values()[i];
		}

		private IHDRInterlaceType(String name) {
			this.name = name;
		}

		public String toString() {
			return name;
		}
	}
	
}
