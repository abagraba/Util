package panels;

import static java.awt.GridBagConstraints.CENTER;
import static java.awt.GridBagConstraints.HORIZONTAL;

import java.awt.GridBagLayout;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;

import com.mimvista.archive.gui.StandardSearchPanel;
import com.mimvista.cloud.organizer.verifier.proui.ComboEntry;
import com.mimvista.cloud.shared.common.enums.StudyEnums.StudyDataContents;
import com.mimvista.cloud.shared.common.enums.StudyEnums.StudyLocation;
import com.mimvista.cloud.shared.common.enums.StudyEnums.StudyStatus;
import com.mimvista.cloud.shared.common.mim.StudySearchParams.BasicSearchParams;
import com.mimvista.properties.MIMPrefs;
import com.mimvista.proui.MIMLookAndFeel;
import com.mimvista.proui.ProTextFieldUI;
import com.mimvista.util.DateUtils;
import com.mimvista.util.Messages;

public class VerifierSearchField extends StandardSearchPanel {
	public static final Messages cloudMsgs = Messages.getMessages("mimcloud");

	protected JComboBox<ComboEntry<StudyDataContents>> contents;

	protected JCheckBox personal;
	protected JCheckBox shared;

	protected JLabel error;

	public void saveToPrefs() {
	}

	public VerifierSearchField() {
		super(MIMPrefs.getPrefs("archive.txt").getStringConfig("DATE FORMAT", DateUtils.defaultPrettyDateFormat), false);
	}

	public void initializeCloudFields() {

		contents = new JComboBox<ComboEntry<StudyDataContents>>();
		populateBox(contents, Messages.get("mimcloud", "SEARCH_STUDY_CONTENTS"), new StudyDataContents[] { StudyDataContents.DICOM, StudyDataContents.BUNDLE,
				StudyDataContents.ANY });

	}

	private static <Entry> void populateBox(JComboBox<ComboEntry<Entry>> combobox, String label, Entry[] entries) {
		combobox.putClientProperty(ProTextFieldUI.INSIDE_LABEL, label);
		combobox.setBackground(MIMLookAndFeel.getSsCloudRoot());
		combobox.setEditable(false);
		for (Entry entry : entries)
			combobox.addItem(new ComboEntry<Entry>(entry, Messages.getMessages("mimcloud").getProperty("SEARCH_STUDY_CONTENTS_" + entry.toString())));
	}

	@Override
	protected void buildPanel() {
		initializeCloudFields();

		personal = new JCheckBox("Include Personal Studies?");
		shared = new JCheckBox("Include Shared Studies?");
		error = new JLabel();

		startDateField.setFormats(dateFormat);
		startDateField.setLightWeightPopupEnabled(true);
		startDateField.setLinkPanel(null);
		startDateField.getEditor().setName("STARTDATE");

		endDateField.setFormats(dateFormat);
		endDateField.setLightWeightPopupEnabled(true);
		endDateField.setLinkPanel(null);
		endDateField.getEditor().setName("ENDDATE");

		nameField.putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_NAME"));
		idField.putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_ID"));
		startDateField.getEditor().putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_START_DATE"));
		endDateField.getEditor().putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_END_DATE"));
		keywordsField.putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_KEYWORDS"));
		modalityField.putClientProperty(ProTextFieldUI.INSIDE_LABEL, props.getProperty("STANDARD_MODALITY"));

		GridBagLayout cgl = new GridBagLayout();
		cgl.columnWeights = new double[] { 1, 1, 1 };
		cgl.rowWeights = new double[] { 0, 0, 0, 1 };
		searchFields.setLayout(cgl);
		searchFields.setOpaque(false);
		searchFields.setBorder(BorderFactory.createEmptyBorder());

		searchFields.add(nameField, getGridBagConstraints(0, 0, HORIZONTAL, CENTER));
		searchFields.add(idField, getGridBagConstraints(1, 0, HORIZONTAL, CENTER));
		searchFields.add(startDateField, getGridBagConstraints(0, 1, HORIZONTAL, CENTER));
		searchFields.add(endDateField, getGridBagConstraints(1, 1, HORIZONTAL, CENTER));
		searchFields.add(keywordsField, getGridBagConstraints(0, 2, HORIZONTAL, CENTER));
		searchFields.add(modalityField, getGridBagConstraints(1, 2, HORIZONTAL, CENTER));
		searchFields.add(contents, getGridBagConstraints(2, 0, HORIZONTAL, CENTER));
		searchFields.add(personal, getGridBagConstraints(2, 1, HORIZONTAL, CENTER));
		searchFields.add(shared, getGridBagConstraints(2, 2, HORIZONTAL, CENTER));
		searchFields.add(error, getGridBagConstraints(3, 1, HORIZONTAL, CENTER));

		addWrapperListenerForSecretListener();
	}

	public BasicSearchParams getFullCloudParams() {

		BasicSearchParams params = new BasicSearchParams();

		ComboEntry<StudyDataContents> selection = (ComboEntry<StudyDataContents>) contents.getSelectedItem();

		params.setContentType(selection.getEntry());
		params.setStartDate(startDateField.getDate());
		params.setEndDate(endDateField.getDate());
		params.setPatientName(nameField.getText());
		params.setPatientId(idField.getText());
		params.setKeywords(keywordsField.getText());
		params.setModality(modalityField.getText());
		params.setStudyLocation(StudyLocation.INBOX);
		params.setStudyStatus(StudyStatus.NORMAL);
		params.setMaxResults(Integer.MAX_VALUE);
		params.setMaskedUidList("");

		return params;
	}

}
