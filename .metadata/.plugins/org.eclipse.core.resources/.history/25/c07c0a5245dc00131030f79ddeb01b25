package com.mimvista.cloud.applet;

import java.util.Arrays;

import com.mimvista.cloud.crypto.common.CryptKeeper;
import com.mimvista.cloud.shared.common.AccountInfo;
import com.mimvista.cloud.shared.common.FoxUtil;
import com.mimvista.cloud.shared.common.enums.AccountEnums;
import com.mimvista.mimcloud.connection.CloudClient;
import com.mimvista.mimcloud.connection.CloudCredentials;
import com.mimvista.mimcloud.connection.CloudCredentialsProvider;
import com.mimvista.mimcloud.connection.CloudManager;
import com.mimvista.mimcloud.connection.CloudResponseException.BadCredentialsException;
import com.mimvista.util.MIMLog;

public class AccountManager implements CloudCredentialsProvider {
	private static AccountManager instance;
	private static CloudCredentials anonUploadCreds = new CloudCredentials(AccountEnums.anonUploaderEmail, AccountEnums.anonUploaderPassword);
	
	private CloudClient client;
	private boolean forAnonymousUpload = false;
	private AccountInfo anonDest = null;
	
	public synchronized static AccountManager get() {
		if (instance == null) {
			instance = new AccountManager();
		}
		return instance;
	}

	private AccountManager() {}

	public synchronized void updateCredentials(String username, String password, JSCallback callback) {
		byte[] pwdBytes = null;
		if (!FoxUtil.isNullOrEmpty(password)) {
			pwdBytes = CryptKeeper.getBytesFromStringUTF8(password);
		}
		
		boolean success = updateCredentials(username, pwdBytes);
		if (callback != null) {
			if (success) {
				callback.success("");
			} else {
				callback.failed("updating credentials failed");
			}
		}
	}

	public void clearPassword(JSCallback callback) {
		CloudManager.clear(getCredentials());
		callback.success("");
	}

	private boolean updateCredentials(String username, byte[] password) {
		String olduser = null;
		byte[] oldpass = null;
		if (client != null) {
			olduser = client.getCredentials().getEmail();
			oldpass = client.getCredentials().getPassword();
		}

		if (FoxUtil.isNullOrEmpty(username)) {
			username = olduser;
		}

		if (password == null) {
			password = oldpass;
		}

		if ((username != null && !username.equals(olduser)) || (password != null && !Arrays.equals(password, oldpass))) {
			return startSession(username, password);
		}

		return true;
	}

	private boolean startSession(String username, byte[] password) {
		try {
			client = CloudManager.client(new CloudCredentials(username, password));
			return true;
		} catch (BadCredentialsException e) {
			client = null;
			MIMLog.error(e, this);
			return false;
		}
	}

	public synchronized CloudClient getClient() {
		if (isForAnonymousUpload()) {
			try {
				return CloudManager.client(anonUploadCreds);
			} catch (BadCredentialsException e) {
				MIMLog.error(e, this);
				return null;
			}
		}
		return client;
	}

	public synchronized byte[] getPassword() {
		if (getCredentials() != null) {
			return getCredentials().getPassword();
		}
		return null;
	}

	@Override
	public synchronized CloudCredentials getCredentials() {
		if (isForAnonymousUpload()) {
			//Anon creds should never be screwed with.  Ever.
			return new CloudCredentials(AccountEnums.anonUploaderEmail, AccountEnums.anonUploaderPassword);
		}
		if (client != null){
			return client.getCredentials();
		}
		return null;
	}

	public synchronized void setForAnonymousUpload(boolean forAnonymousUpload) {
		this.forAnonymousUpload = forAnonymousUpload;
	}

	public synchronized void setAnonyUploadDest(AccountInfo anonDest) {
		this.anonDest = anonDest;
	}

	public AccountInfo getAnonyUploadDest() {
		return anonDest;
	}

	public boolean isForAnonymousUpload() {
		return forAnonymousUpload;
	}

	public synchronized static void reset() {
		if (instance != null) {
			instance.client = null;
			instance = null;
		}
	}
}
