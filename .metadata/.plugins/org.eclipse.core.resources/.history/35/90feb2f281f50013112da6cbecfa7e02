package com.mimvista.cloud.server.studies;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.googlecode.objectify.Key;
import com.mimvista.cloud.CloudUtil;
import com.mimvista.cloud.models.Series;
import com.mimvista.cloud.models.Study;
import com.mimvista.cloud.server.DAO;
import com.mimvista.cloud.server.SadfoxProcessor;
import com.mimvista.cloud.server.filestore.S3Service;
import com.mimvista.cloud.shared.common.S3SeriesURL;
import com.mimvista.cloud.shared.common.enums.StudyEnums.S3Location;

public class GetSeriesS3HeadURLProcessor extends SadfoxProcessor {

	private long[] ids;

	public GetSeriesS3HeadURLProcessor(HttpServletRequest req, HttpServletResponse rsp) {
		super(req, rsp);
		try {
			ids = gson().fromJson(req.getReader(), CloudUtil.longListType);
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void process() {
		Arrays.asList(ids);
		List<Key<Study>> keys = DAO.idsToKeys(Study.class, ids);
		Map<Key<Study>, Study> studymap = new DAO().ofy().get(keys);
		Map<Long, Map<String, S3SeriesURL>> results = Maps.newHashMap();

		for (Study study : studymap.values())
			for (Series series : study.getSeriesList())
				addSeries(results, study.getId(), series.getSeriesUID(), getS3SeriesURL(series));
		
		try {
			gson().toJson(results, rsp.getWriter());
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static S3SeriesURL getS3SeriesURL(Series series) {
		S3Service service = S3Service.getInstance();
		S3Location location = series.getS3Location();
		String dicom = service.getHeadUrl(location, series.getDicomUrl());
		List<String> bundles = Lists.newArrayList();
		for (String bundleFile : series.getBundleFiles().values()) {
			bundles.add(service.getHeadUrl(location, bundleFile));
		}
		return new S3SeriesURL(dicom, bundles);
	}

	private static void addSeries(Map<Long, Map<String, S3SeriesURL>> results, long studyID, String seriesUID, S3SeriesURL value) {
		if (!results.containsKey(studyID))
			results.put(studyID, new HashMap<String, S3SeriesURL>());
		results.get(studyID).put(seriesUID, value);
	}
}
