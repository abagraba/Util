package com.mimvista.cloud.organizer.verifier.panels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import com.mimvista.atlas.command.SaveToAtlasCommand;
import com.mimvista.cloud.organizer.verifier.ResultWriter;
import com.mimvista.cloud.organizer.verifier.VerifierTask;
import com.mimvista.cloud.organizer.verifier.panels.VerifierSearchResultView.VerifierSearchResultViewEnum;
import com.mimvista.cloud.organizer.verifier.proui.BoxUtil;
import com.mimvista.cloud.organizer.verifier.proui.Navigable;
import com.mimvista.cloud.organizer.verifier.proui.SwapPanel;
import com.mimvista.preferencesNew.MIMCloudOrganizerPrefs;
import com.mimvista.util.work.MimTaskManager;

public class VerifierSavePanel extends JPanel implements Navigable {

	private SwapPanel swapPanel;
	private VerifierSearchResultDisplay display;

	private JButton back = new JButton(VerifierTask.props.getProperty("VERIFIER_BACK"));
	private JButton open = new JButton(VerifierTask.props.getProperty("VERIFIER_OPEN_FILE"));
	private JButton finish = new JButton(VerifierTask.props.getProperty("VERIFIER_FINISH"));

	private JLabel filename = new JLabel(" ");
	private JLabel savestate = new JLabel(VerifierTask.props.getProperty("VERIFIER_SAVING"));

	private static final File root = new File("/");

	private ActionListener backAction = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			VerifierSavePanel.this.swapPanel.swapTo(display);
		}
	};

	private ActionListener openAction = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			VerifierSavePanel.this.swapPanel.swapTo(display);
		}
	};

	public VerifierSavePanel(SwapPanel swapPanel, final List<VerifierSearchResultView> results, final int format, VerifierSearchResultDisplay display) {
		this.swapPanel = swapPanel;
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

		this.display = display;

		back.addActionListener(backAction);
		open.addActionListener(openAction);
		finish.addActionListener(swapPanel.home);

		open.setEnabled(false);
		
		MimTaskManager.background.execute(new Runnable() {
			@Override
			public void run() {
				save(results, format);
			}
		});
		
		BoxUtil.addGlue(this);
		BoxUtil.insert(savestate, this);
		BoxUtil.addStrut(this, 10);
		BoxUtil.insert(filename, this);
		BoxUtil.addGlue(this);
	}

	private void save(List<VerifierSearchResultView> results, int format) {
		System.out.println("Saving");
		final File target = format == VerifierFormatSelect.CSV ? getFile(root, ".csv") : format == VerifierFormatSelect.JSON ? getFile(root, ".json") : null;
		try {
			switch (format) {
				case VerifierFormatSelect.CSV:
					ResultWriter.writeToCSV(target, results.toArray(new VerifierSearchResultView[results.size()]), readSettings(), true);
					break;
				case VerifierFormatSelect.JSON:
					ResultWriter.writeToJSON(target, results.toArray(new VerifierSearchResultView[results.size()]));
					break;
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Saved");
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				savestate.setText(VerifierTask.props.getProperty("VERIFIER_SAVED_TO"));
				filename.setText(target.getAbsolutePath());
				open.setEnabled(true);
			}
		});
	}

	private VerifierSearchResultViewEnum[] readSettings() {
		String[] saved = MIMCloudOrganizerPrefs.resultDisplayColumns.getValue();
		VerifierSearchResultViewEnum[] settings = new VerifierSearchResultViewEnum[saved.length];
		int i = 0;
		for (String save : saved) {
			settings[i++] = VerifierSearchResultViewEnum.valueOf(save);
		}
		return settings;
	}

	private File getFile(File root, String suffix) {
		int i = 0;
		while (true) {
			File f = new File(root, i + suffix);
			if (!f.exists()) {
				try {
					f.createNewFile();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
				return f;
			}
		}
	}

	@Override
	public int numButtons() {
		return 3;
	}

	@Override
	public JButton getButton(int i) {
		switch (i) {
			case 0:
				return back;
			case 1:
				return open;
			case 2:
				return finish;
		}
		return null;
	}

}
