package com.mimvista.cloud.client.admin;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.google.gwt.cell.client.AbstractCell;
import com.google.gwt.cell.client.ButtonCell;
import com.google.gwt.cell.client.Cell.Context;
import com.google.gwt.cell.client.FieldUpdater;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;
import com.mimvista.cloud.client.SadFoxEntryPoint;
import com.mimvista.cloud.client.Services;
import com.mimvista.cloud.client.content.AbstractPageContent;
import com.mimvista.cloud.client.content.LeftNavImageSet;
import com.mimvista.cloud.client.nav.SiteMapNode;
import com.mimvista.cloud.client.sitemap.SiteMap;
import com.mimvista.cloud.client.widgets.FoxCheckBox;
import com.mimvista.cloud.client.widgets.FoxFormPager;
import com.mimvista.cloud.client.widgets.FoxListBox;
import com.mimvista.cloud.client.widgets.FoxTextArea;
import com.mimvista.cloud.client.widgets.FoxTextBox;
import com.mimvista.cloud.client.widgets.ListFormCellTable;
import com.mimvista.cloud.shared.common.Messages;
import com.mimvista.cloud.shared.common.mobile.MobileMIMRegistration.MobileApprovalInfo;
import com.mimvista.cloud.shared.common.mobile.MobileMIMRegistration.MobileRegistrationStatus;

public class MobileMIMAdminForm extends AbstractPageContent{

	private static MobileMIMAdminFormUiBinder uiBinder = GWT.create(MobileMIMAdminFormUiBinder.class);

	interface MobileMIMAdminFormUiBinder extends UiBinder<Widget, MobileMIMAdminForm> {}

	static {
		Messages.putMessage("en", MobileMIMAdminForm.class, "MOBILE", "MOBILE REGISTRATION");
	}
	static String getMessage(String key){ return Messages.getString(MobileMIMAdminForm.class, key); }
	
	@UiField HTML header;
	@UiField VerticalPanel listPanel;
	@UiField VerticalPanel manualControl;
	
	private ApprovalListWidget approvals = new ApprovalListWidget(true);
	private FoxFormPager pager;
	
	private FoxTextBox appId;
	private FoxTextBox version;
	private FoxTextBox model;
	private FoxTextBox os;
	private FoxTextArea message;
	private FoxListBox status;
	private FoxListBox statList;
	private FoxCheckBox sendEmail;
	
	public MobileMIMAdminForm() {
		initWidget(uiBinder.createAndBindUi(this));
		
		header.setText(getMessage("MOBILE"));
		
		appId = new FoxTextBox("application");
		version = new FoxTextBox("version");
		model = new FoxTextBox("model");
		os = new FoxTextBox("ios");
		status = new FoxListBox("status");
		message = new FoxTextArea("message");
		statList = new FoxListBox("statList");
		sendEmail = new FoxCheckBox("sendEmail");
		
		appId.setLabelMessage("App:");
		appId.setPixelSize(70, 16);
		version.setLabelMessage("Version:");
		version.setPixelSize(70, 16);
		model.setLabelMessage("Model:");
		model.setPixelSize(70, 16);
		os.setLabelMessage("iOS:");
		os.setPixelSize(85, 16);
		status.setLabelMessage("Status:");
		message.setLabelMessage("Message:");
		message.setPixelSize(300, 50);
		sendEmail.setLabelMessage("E-mail Affected Users");
		
		statList.addItem("");
		for(MobileRegistrationStatus s : MobileRegistrationStatus.values()){
			statList.addItem(s.toString());
			status.addItem(s.toString());
		}
		statList.setSelectedValue(MobileRegistrationStatus.UNKNOWN.toString());
		statList.addChangeHandler(new ChangeHandler(){
			@Override
			public void onChange(ChangeEvent event) {
				reloadApprovals();
			}
		});
		
		listPanel.add(statList);
		
		pager = ListFormCellTable.getDefaultCellTablePager();
		pager.setDisplay(approvals);
		
		listPanel.add(approvals);
		listPanel.add(pager);
		
		HorizontalPanel fields = new HorizontalPanel();
		fields.add(appId);
		fields.add(version);
		fields.add(model);
		fields.add(os);
		fields.add(status);
		manualControl.add(fields);
		
		HorizontalPanel msg = new HorizontalPanel();
		msg.add(message);
		msg.add(sendEmail);
		
		manualControl.add(msg);
		Button update = new Button();
		update.setText("Update");
		update.addClickHandler(new ClickHandler(){
			@Override
			public void onClick(ClickEvent event) {
				Services.mobileRegCrud.createOrUpdateStatus(appId.getFieldValue(),
						version.getFieldValue(), model.getFieldValue(), os.getFieldValue(),
						message.getFieldValue(), MobileRegistrationStatus.valueOf(status.getFieldValue()), sendEmail.getValue(),
						new AsyncCallback<Void>() {
							@Override
							public void onFailure(Throwable caught) {
								SadFoxEntryPoint.get().handleFailure(caught);
							};
							
							@Override
							public void onSuccess(Void result) {
								reloadApprovals();
							}
						});
			}
		});
		manualControl.add(update);
		
		reloadApprovals();
	}
	
	public void reloadApprovals(){
		final MobileRegistrationStatus valueOf = MobileRegistrationStatus.valueOf(statList.getFieldValue());
		Services.mobileRegCrud.getApprovalsOfType(valueOf, new AsyncCallback<ArrayList<MobileApprovalInfo>>(){
			@Override
			public void onFailure(Throwable caught) {
				caught.printStackTrace();
			}

			@Override
			public void onSuccess(ArrayList<MobileApprovalInfo> result) {
				approvals.setList(result, valueOf);
			}
		});
	}
	
	public class ApprovalListWidget extends ListFormCellTable<MobileApprovalInfo> {
		private Button b = new Button();
		private boolean allowChanges;
		
		public ApprovalListWidget(boolean allowChanges){
			this.allowChanges = allowChanges;
			initColumns();
			
		}
		
		public void setList(List<MobileApprovalInfo> approvals, MobileRegistrationStatus s){
			if(s == MobileRegistrationStatus.UNKNOWN){
				allowChanges = true;
			}else{
				allowChanges = false;
			}
			removeAllColumns();
			initColumns();
			Collections.sort(approvals, new Comparator<MobileApprovalInfo>(){
				@Override
				public int compare(MobileApprovalInfo arg0, MobileApprovalInfo arg1) {
					return arg0.getVersionNumber().compareToIgnoreCase(arg1.getVersionNumber());
				}
			});
			
			setData(approvals);
		}
		
		private void initColumns(){
			Column<MobileApprovalInfo, String> appId = new Column<MobileApprovalInfo, String>(new AbstractCell<String>(){
				@Override
				public void render(Context context, String value, SafeHtmlBuilder sb) {
					sb.appendHtmlConstant("<small>");
					sb.appendEscaped(value);
					sb.appendHtmlConstant("</small>");
				}
			}){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return object.getAppId();
				};
			};
			
			Column<MobileApprovalInfo, String> versionNumber = new Column<MobileApprovalInfo, String>(new AbstractCell<String>(){
				@Override
				public void render(Context context, String value, SafeHtmlBuilder sb) {
					sb.appendHtmlConstant("<small>");
					sb.appendEscaped(value);
					sb.appendHtmlConstant("</small>");
				}
			}){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return object.getVersionNumber();
				};
			};
			
			Column<MobileApprovalInfo, String> model = new Column<MobileApprovalInfo, String>(new AbstractCell<String>(){
				@Override
				public void render(Context context, String value, SafeHtmlBuilder sb) {
					sb.appendHtmlConstant("<small>");
					sb.appendEscaped(value);
					sb.appendHtmlConstant("</small>");
				}
			}){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return object.getModel();
				};
			};
			
			Column<MobileApprovalInfo, String> os = new Column<MobileApprovalInfo, String>(new AbstractCell<String>(){
				@Override
				public void render(Context context, String value, SafeHtmlBuilder sb) {
					sb.appendHtmlConstant("<small>");
					sb.appendEscaped(value);
					sb.appendHtmlConstant("</small>");
				}
			}){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return object.getOs();
				};
			};
			
			this.addColumn(appId, "Application");
			this.addColumn(versionNumber, "Version");
			this.addColumn(model, "Device Model");
			this.addColumn(os, "iOS");
			
			Column<MobileApprovalInfo, String> approveColumn = new Column<MobileApprovalInfo, String>(new ButtonCell()){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return "Approve";
				}
				
				@Override
				public void render(Context context, MobileApprovalInfo object, SafeHtmlBuilder sb) {
					b.setText(getValue(object));
					sb.appendHtmlConstant(b.toString());
				}
			};
			approveColumn.setFieldUpdater(new FieldUpdater<MobileApprovalInfo, String>(){
				@Override
				public void update(int index, MobileApprovalInfo object, String value) {
					Services.mobileRegCrud.createNewApproval(object.getAppId(), object.getVersionNumber(), object.getModel(), object.getOs(), new AsyncCallback<Void>() {
						@Override
						public void onFailure(Throwable caught) {
							reloadApprovals();
						}
						
						@Override
						public void onSuccess(Void result) {
							reloadApprovals();
						}
					});
				}
			});
			
			Column<MobileApprovalInfo, String> rejectColumn = new Column<MobileApprovalInfo, String>(new ButtonCell()){
				@Override
				public String getValue(MobileApprovalInfo object) {
					return "Reject";
				}
				
				@Override
				public void render(Context context, MobileApprovalInfo object, SafeHtmlBuilder sb) {
					b.setText(getValue(object));
					sb.appendHtmlConstant(b.toString());
				}
			};
			rejectColumn.setFieldUpdater(new FieldUpdater<MobileApprovalInfo, String>(){
				@Override
				public void update(int index, MobileApprovalInfo object, String value) {
					Services.mobileRegCrud.createNewRejection(object.getAppId(), object.getVersionNumber(), object.getModel(), object.getOs(), new AsyncCallback<Void>() {
						@Override
						public void onFailure(Throwable caught) {
							reloadApprovals();
						}
						
						@Override
						public void onSuccess(Void result) {
							reloadApprovals();
						};
					});
				}
			});
			
			if(allowChanges){
				this.addColumn(approveColumn);
				this.addColumn(rejectColumn);
			}
		}
	}

	
	@Override
	public String getTitle(){
		return "Mobile";
	}

	@Override
	public String getContentTitle() {
		return "Mobile Registration";
	}

	@Override
	public SiteMapNode getSiteMapNode() {
		return SiteMap.Main.Admin.Mobile;
	}
	
	@Override
	public LeftNavImageSet getLeftNavImageSet() {
		String imageUrl = "/media/icons/menu/viewing.png";
		return new LeftNavImageSet(imageUrl, imageUrl, imageUrl);
	}
}