package com.mimvista.cloud.server.filestore;

import java.util.List;

import com.google.common.collect.Lists;
import com.google.gdata.util.common.base.Pair;
import com.mimvista.cloud.models.Series;
import com.mimvista.cloud.shared.common.enums.StudyEnums.S3Location;

/*
 * To facilitate testing, this is abstract.
 */
public abstract class S3Service {
	private static S3Service instance = null;
	
	public static S3Service getInstance() {
		if (instance == null) {
			instance = new S3ServiceImpl();
		}
		return instance;
	}
	
	public static void setInstance(S3Service instance) {
		S3Service.instance = instance;
	}
	
	public abstract String getDownloadUrl(S3Location loc, String key);
	public abstract boolean checkFileExists(S3Location loc, String key);
	public abstract void delete(S3Location loc, String key);
	
	@SuppressWarnings("unchecked")
	public final boolean copy(S3Location loc, String srcKey, String destKey) {
		Pair<String, String> pair = Pair.of(srcKey, destKey);
		return copyFiles(loc, Lists.newArrayList(pair));
	}
	
	/*
	 * You can start up as many async clients as you like, and they'll share a global
	 * request pool.
	 */
	public abstract AsyncS3Client newAsyncDeletionClient(Series... series);
	public abstract AsyncS3Client newAsyncExistenceClient(Series...series);
	public abstract AsyncS3Client newAsyncCopyClient(S3Location loc, List<Pair<String,String>> srcDestPairs);

	public final void deleteFiles(List<Series> series) {
		deleteFiles(series.toArray(new Series[0]));
	}
	
	public final void deleteFiles(Series...series) {
		newAsyncDeletionClient(series).waitFinalResult();
	}
	
	public boolean checkFilesExist(Series... series) {
		return newAsyncExistenceClient(series).waitFinalResult();
	}
	
	public final boolean copyFiles(S3Location loc, List<Pair<String,String>> srcDestPairs) {
		return newAsyncCopyClient(loc, srcDestPairs).waitFinalResult();
	}
	
}
