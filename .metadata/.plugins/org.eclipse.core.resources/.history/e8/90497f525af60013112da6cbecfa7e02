package com.mimvista.cloud.organizer.verifier.panels;

import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.List;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

import com.google.common.collect.Lists;
import com.mimvista.cloud.organizer.verifier.VerifierTask;
import com.mimvista.cloud.organizer.verifier.panels.VerifierSeriesView.VerifierSeriesViewEnum;
import com.mimvista.cloud.organizer.verifier.proui.BoxUtil;
import com.mimvista.preferencesNew.MIMCloudOrganizerPrefs;

public class VerifierSearchResultDisplayOption extends JDialog {

	private static final long serialVersionUID = 1L;

	private int border = 100;

	private JCheckBox[] choices;
	private JButton cancel = new JButton(VerifierTask.props.getProperty("VERIFIER_CANCEL"));
	private JButton confirm = new JButton(VerifierTask.props.getProperty("VERIFIER_CONFIRM"));

	private ActionListener cancelAction = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			dispatchEvent(new WindowEvent(VerifierSearchResultDisplayOption.this, WindowEvent.WINDOW_CLOSING));
		}
	};
	private ActionListener confirmAction = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			if (saveSettings())
				dispatchEvent(new WindowEvent(VerifierSearchResultDisplayOption.this, WindowEvent.WINDOW_CLOSING));
		}
	};

	public VerifierSearchResultDisplayOption(Window window, VerifierSearchResultDisplayPanel display) {
		super(window, "Open File", ModalityType.APPLICATION_MODAL);
		JPanel content = BoxUtil.verticalBox();
		content.setBorder(new EmptyBorder(border, border, border, border));

		JLabel title = new JLabel("Search View Options");
		title.setFont(title.getFont().deriveFont(Font.BOLD, 24));

		choices = new JCheckBox[VerifierSeriesViewEnum.values().length];

		BoxUtil.insert(title, content);
		BoxUtil.addStrut(content, 25);
		BoxUtil.insert(makeGrid(2, VerifierSeriesViewEnum.values()), content);
		for (VerifierSeriesViewEnum value : getSettings())
			choices[value.ordinal()].setSelected(true);

		cancel.addActionListener(cancelAction);
		confirm.addActionListener(confirmAction);

		JPanel buttons = BoxUtil.horizontalBox();
		BoxUtil.insert(cancel, buttons);
		BoxUtil.addStrut(buttons, 10);
		BoxUtil.insert(confirm, buttons);

		BoxUtil.addStrut(content, 25);
		BoxUtil.insert(buttons, content);

		setContentPane(content);
		pack();
		setVisible(true);
	}

	private JPanel makeGrid(int columns, VerifierSeriesViewEnum[] values) {
		JPanel grid = BoxUtil.horizontalBox();
		JPanel[] boxes = new JPanel[columns];
		for (int c = 0; c < columns; c++) {
			boxes[c] = BoxUtil.verticalBox();
			BoxUtil.insert(boxes[c], grid);
		}
		int i = 0;
		for (VerifierSeriesViewEnum option : values) {
			JCheckBox box = new JCheckBox(option.toString());
			choices[i] = box;
			BoxUtil.insert(box, boxes[i++ * columns / values.length]);
		}
		return grid;
	}

	public boolean saveSettings() {
		List<VerifierSeriesViewEnum> settings = Lists.newArrayList();
		for (int i = 0; i < choices.length; i++)
			if (choices[i].isSelected())
				settings.add(VerifierSeriesViewEnum.values()[i]);
		String[] save = new String[settings.size()];
		int i = 0;
		for (VerifierSeriesViewEnum setting : settings)
			save[i++] = setting.name();
		if (save.length == 0)
			return false;
		MIMCloudOrganizerPrefs.resultDisplayColumns.setValue(save);
		return true;
	}

	public VerifierSeriesViewEnum[] getSettings() {
		String[] saved = MIMCloudOrganizerPrefs.resultDisplayColumns.getValue();
		VerifierSeriesViewEnum[] settings = new VerifierSeriesViewEnum[saved.length];
		int i = 0;
		for (String save : saved) {
			settings[i++] = VerifierSeriesViewEnum.valueOf(save);
		}
		return settings;
	}
}
